 Notes for Communications/Electronics Officers using these programs:

  The program CEOI.EXE Generates single page (8 1/2 X 11) 
Authentication/Cipher tables, in the process it imports the HORIZ.TXT and 
VERT.TXT files. These files should be changed by you to make the single page 
more useful. An example: The area covered by VERT.TXT could contain current 
call signs for the unit and time period in question. The file HORIZ.TXT MUST 
be kept up with a current brevity list for the situation. 
    The  Single (numerical) Opcode table for use with the 
Authentication/Cipher table is generated by the action of table.exe on a list 
of opcodes (table.txt) yielding an output file (outfile.txt). The input file 
(table.txt) can be maintained with any editor (like ted3 included in the 
package) and should be modified to meet actual needs. Words describing current 
equipment and units must be added to the list. Unused words must be deleted to 
keep the list under 1000 entries. Each opcode should be a single line of not 
more than 20 characters (keep in alphabetical order). The output file 
"outfile.txt" should be printed via your favorite word processor (to control 
pagination and type fonts). (for simple computer setups use the COPY command 
to copy to the printer (>COPY OUTFILE.TXT PRN) ) 
  If you have the facilities to print and distribute the larger volume of 
paper, Text to Code and Code to Text tables (U.S.Army style) Opcode tables can 
be generated by the action of OPCODE.EXE on the same list of opcodes 
(table.txt) as above. The number of entries is limited by the program to about 
17,000 however 1,000 is probably too many. The entries in table.txt for use 
with OPCODE.EXE are not required to be in alphabetical order (the program 
sorts them) 
  The words in table.txt are from a 1970's era training CEOI and MUST be 
brought up to date by the user. Add words for current equipment and conditions 
and delete all unnecessary words.

 One possible weakness of these programs is the simple random number generator 
used. The source code for it is shown below:

#include <stdlib.h>

#define MULTIPLIER      0x015a4e35L
#define INCREMENT       1

static  long    Seed = 1;

void srand(unsigned seed)
{
        Seed = seed;
}
int rand(void)
{
        Seed = MULTIPLIER * Seed + INCREMENT;
        return((int)(Seed >> 16) & 0x7fff);
}
 You may want to substitute other functions for these.


